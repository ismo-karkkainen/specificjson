#!/usr/bin/env ruby

# Copyright 2020 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See License.txt.

require 'optparse'
require 'yaml'

$RECIPE = 'recipe.yaml'
$REBUILD = nil
$CLEAN = false

parser = OptionParser.new do |opts|
  opts.summary_indent = '  '
  opts.summary_width = 24
  opts.banner = "Usage: build [options]"
  opts.separator ""
  opts.separator "Options:"
  opts.on('-i', '--import FILENAME', "File list as YAML array. Default is #{$RECIPE}") { |f| $RECIPE = f }
  opts.on('--rebuild FILENAME', "Re-built script name.") { |f| $REBUILD = f }
  opts.on('--clean', 'Remove embedded information at re-build.') { $CLEAN = true }
  opts.on('-h', '--help', 'Print this help and exit.') do
    STDOUT.puts opts
    exit 0
  end
end
parser.parse!

#$PIECESASSIGNMENTSTART#
$PIECES = {}
#$PIECESASSIGNMENTEND#

def load_piece(piece, field, directory)
  file = piece.fetch(field, nil)
  file = IO.read(File.join(directory, file)) unless file.nil?
  piece[field] = file
end

unless $RECIPE.nil?
  recipe = YAML.load(File.open($RECIPE, 'r'))
  unless recipe.is_a? Array
    STDERR.puts 'Recipe file must be a YAML array of file names.'
    exit(2)
  end
  recipe.each do |filename|
    puts filename
    piece = YAML.load(File.open(filename, 'r'))
    d = File.dirname filename
    piece.each_pair do |name, spec|
      load_piece(spec, 'header', d)
      load_piece(spec, 'source', d)
      load_piece(spec, 'license', d)
      # Set other defaults.
      $PIECES[name] = spec
    end
  end
end

# Export option dealt with here.

unless $REBUILD.nil?
  if $CLEAN
    $PIECES = {} # Yes, you can clean and re-build to same file without export.
  end
  script = File.new($0, chomp: true).readlines
  first = script.find_index { |ln| ln.start_with? '#$PIECESASSIGNMENTSTART#' }
  last = script.find_index { |ln| ln.start_with? '#$PIECESASSIGNMENTEND#' }
  if first.nil? or last.nil? or last < first
    STDERR.puts 'Failed to find lines starting with or in wrong order: #$PIECESASSIGNMENTSTART# #$PIECESASSIGNMENTEND#'
    exit(2)
  end
  succeeding = script.slice(last, script.size - last)
  script = script.slice(0, first + 1).join
  script.concat(%Q(
$PIECES = YAML.load(%Q(
#{YAML.dump($PIECES)}
))
))
  script.concat(succeeding.join)
  IO.write($REBUILD, script)
  File.chmod(0755, $REBUILD)
  exit(0)
end
