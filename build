#!/usr/bin/env ruby

# Copyright 2020 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See License.txt.

require 'optparse'
require 'yaml'
require 'json'
require 'base64'

$IN = nil
$RECIPE = nil
$BUILD = nil
$CLEAN = false
$WARN = false

parser = OptionParser.new do |opts|
  opts.summary_indent = '  '
  opts.summary_width = 24
  opts.banner = "Usage: build [options]"
  opts.separator ""
  opts.separator "Options (processed in order listed below):"
  opts.on('--clean', 'Ignore embedded information.') { $CLEAN = true }
  opts.on('--import FILELIST', 'Information YAML file list as YAML array.') { |f| $RECIPE = f }
  opts.on('--warn', 'Only warn of missing requirements. Error otherwise.') { $WARN = true }
  opts.on('--build OUTPUT', 'Re-build to named script.') { |f| $BUILD = f }
  opts.on('-i', '--input FILENAME', 'Specifications to use.') { |f| $IN = f }
  opts.on('-h', '--help', 'Print this help and exit.') do
    STDOUT.puts opts
    exit 0
  end
end
parser.parse!

#$PIECESASSIGNMENTSTART#
$PIECES = {}
$FILECONTENTS = {}
#$PIECESASSIGNMENTEND#

if $CLEAN
  $PIECES = {}
  $FILECONTENTS = {}
end

$FILECONTENTS.each_pair do |key, value|
  $FILECONTENTS[key] = Base64.decode64(value)
end

def load_piece_file(piece, field, directory)
  filename = piece.fetch(field, nil)
  if filename.nil?
    piece[field] = nil
    piece["#{field}_stored"] = nil
    return
  end
  filename = File.realpath(filename, directory)
  puts filename
  file = IO.read(File.new(filename, 'r'))
  stored = nil
  keys = $FILECONTENTS.keys
  for k in 0..keys.size
    if $FILECONTENTS[keys[k]] == file
      stored = keys[k]
      break
    end
  end
  if stored.nil?
    stored = "c#{$FILECONTENTS.size}"
    $FILECONTENTS[stored] = file
  end
  piece["#{field}_stored"] = stored
end

def default(spec, field, value)
  spec[field] = value unless spec.has_key? field
end

unless $RECIPE.nil?
  recipe = YAML.load(File.open($RECIPE, 'r'))
  root = File.dirname(File.realpath($RECIPE))
  unless recipe.is_a? Array
    STDERR.puts 'Recipe file must be a YAML array of file names.'
    exit(2)
  end
  recipe.each do |filename|
    filename = File.realpath(filename, root)
    puts filename
    piece = YAML.load(File.open(filename, 'r'))
    d = File.dirname filename
    piece.each_pair do |name, spec|
      load_piece_file(spec, 'header', d)
      load_piece_file(spec, 'source', d)
      load_piece_file(spec, 'license', d)
      default(spec, 'includes', [])
      default(spec, 'source_includes', [])
      default(spec, 'requires', [])
      default(spec, 'external', true)
      default(spec, 'declaration', nil)
      default(spec, 'pooled', nil)
      default(spec, 'poolindexes', nil)
      default(spec, 'poolparsers', nil)
      default(spec, 'poolparsertypes', nil)
      default(spec, 'parsername', "Parse#{name}")
      unless spec['pooled'].nil?
        [ 'poolindexes', 'poolparsers', 'poolparsertypes' ].each do |field|
          raise ArgumentError.new("#{name} has both pooled and #{field}") unless spec[field].nil?
        end
      end
      $PIECES[name] = spec
    end
  end
end

# Check that requirements are met.
missing = false
$PIECES.each_pair do |name, spec|
  spec['requires'].each do |r|
    unless $PIECES.has_key? r
      STDERR.puts "#{name} missing requirement: #{r}"
      missing = true
    end
  end
end
exit(4) if missing and not $WARN

# Eventual export option dealt with here.

unless $BUILD.nil?
  script = File.new($0, chomp: true).readlines
  first = script.find_index { |ln| ln.start_with? '#$PIECESASSIGNMENTSTART#' }
  last = script.find_index { |ln| ln.start_with? '#$PIECESASSIGNMENTEND#' }
  if first.nil? or last.nil? or last < first
    STDERR.puts 'Failed to find lines starting with or in wrong order: #$PIECESASSIGNMENTSTART# #$PIECESASSIGNMENTEND#'
    exit(2)
  end
  succeeding = script.slice(last, script.size - last).join
  script = script.slice(0, first + 1).join
  encoded = {}
  $FILECONTENTS.each_pair do |key, value|
    encoded[key] = Base64.encode64(value)
  end
  script.concat(%Q(
$PIECES = YAML.load(%Q(#{YAML.dump($PIECES)}))
$FILECONTENTS = YAML.load(%Q(#{YAML.dump(encoded)}))
))
  script.concat(succeeding)
  IO.write($BUILD, script)
  File.chmod(0755, $BUILD)
end

exit(0) if $IN.nil?

input = File.new($IN, 'r').read
begin
  specs = JSON.parse(input)
rescue StandardError
  begin
    specs = YAML.load(input)
  rescue StandardError
    STDERR.puts 'Input neither JSON nor YAML.'
    exit(3)
  end
end

$PIECES.each_pair { |name, piece| piece['name'] = name }

def all_requirements(piece, reqs)
  unless reqs.include? piece['name']
    reqs.push piece['name']
    piece['requires'].each do |r|
      next if reqs.include? r
      all_requirements($PIECES[r], reqs)
    end
  end
  return reqs
end

$PIECES.each_value do |piece|
  piece['all_requires'] = all_requirements(piece, [])
end

def parserpool_substitutions(needed, namespace)
  $pools = []
  $pooled = []
  needed.each do |name|
    piece = $PIECES[name]
    $pools.push(name) unless piece['poolindexes'].nil? and piece['poolparsers'].nil? and piece['poolparsertypes'].nil?
    $pooled.push(name) unless piece['pooled'].nil?
    [ 'header', 'source' ].each do |field|
      fc = piece["#{field}_stored"]
      next if fc.nil?
      piece["#{field}_content"] = String.new($FILECONTENTS[fc])
      next if 'specjson' == namespace
      until piece["#{field}_content"].sub!('specjson::', "#{namespace}::").nil?
      end
    end
  end
  poolvals = {
    'poolindexes' => [],
    'poolparsers' => [],
    'poolparsertypes' => []
  }
  $pooled.each_index do |k|
    piece = $PIECES[$pooled[k]]
    poolvals['poolindexes'].push $pooled[k]
    poolvals['poolparsers'].push piece['parsername']
    poolvals['poolparsertypes'].push "#{piece['parsername']}::Type"
    [ 'header', 'source' ].each do |field|
      fc = piece["#{field}_stored"]
      next if fc.nil?
      until piece["#{field}_content"].sub!(piece['pooled'], k.to_s).nil?
      end
    end
  end
  poolvals.each_pair { |k, v| poolvals[k] = v.join(', ') }
  $pools.each do |name|
    piece = $PIECES[name]
    [ 'header', 'source' ].each do |field|
      fc = piece["#{field}_stored"]
      next if fc.nil?
      poolvals.each_pair do |fld, value|
        until piece["#{field}_content"].sub!(piece[fld], value).nil?
        end
      end
    end
  end
end

def licenses(needed)
  lic2id = { }
  needed.each do |name|
    lic = $PIECES[name]['license_stored']
    next if lic.nil? or lic2id.has_key? lic
    lic2id[lic] = "License #{lic2id.size + 1}"
  end
  return lic2id
end

def compare_pieces(a, b)
  a = $PIECES[a]
  b = $PIECES[b]
  areqs = a['all_requires']
  breqs = b['all_requires']
  if areqs.include? b['name']
    return areqs.length <=> breqs.length if breqs.include? a['name']
    return 1
  end
  return -1 if breqs.include? a['name']
  # Neither requires the other. Keep pools and pooled items before others.
  if $pooled.include? a['name']
    return -1 unless $pooled.include? b['name']
  else
    return 1 if $pooled.include? b['name']
  end
  if $pools.include? a['name']
    return -1 unless $pools.include? b['name']
  else
    return 1 if $pools.include? b['name']
  end
  return areqs.length <=> breqs.length unless areqs.length == breqs.length
  return a['name'] <=> b['name']
end

def arrange_needed(needed)
  pools = needed.select { |name| $pools.include? name }
  others = needed.select { |name| not(pools.include?(name)) }
  others.sort! { |a, b| compare_pieces(a, b) }
  last = others.rindex { |name| $pooled.include? name }
  needed = others.slice!(0, last + 1)
  others.concat pools
  others.sort! { |a, b| compare_pieces(a, b) }
  needed.concat others
  return needed
end

def unique_in_order(piece_names, field)
  values = []
  piece_names.each do |name|
    piece = $PIECES[name]
    next if piece[field].nil?
    if piece[field].is_a? String
      values.push(piece[field]) unless values.include? piece[field]
    else
      piece[field].each do |line|
        values.push(line) unless values.include? line
      end
    end
  end
  return values
end

def license_block(lic2id)
  blocks = []
  lic2id.each_pair do |lic, id|
    blocks.push %Q(
#if 0
/*
#{id}:

#{$FILECONTENTS[lic]}
*/
#endif
)
  end
  return blocks.join("\n")
end

def make_header(spec, piece_names, lic2id)
  h = File.new(spec['header'], 'w')
  h.puts %Q(// Auto-generated file. Do not edit.
#if !defined(#{spec['header'].upcase.sub('.', '_')})
#define #{spec['header'].upcase.sub('.', '_')}

#{license_block(lic2id)}
)
  h.puts %Q(
#{unique_in_order(piece_names, 'includes').join("\n")}

namespace #{spec['namespace']} {

#{unique_in_order(piece_names, 'declaration').join("\n")}
)
  prev = nil
  piece_names.each do |name|
    piece = $PIECES[name]
    next if piece['header_stored'].nil?
    lic = piece['license_stored']
    if lic != prev
      h.puts
      h.puts(lic.nil? ? '// Unspecified license.' : "// Under #{lic2id[lic]}.")
      prev = lic
    end
    h.puts
    h.puts(piece['header_content'])
  end
  h.puts %Q(
} // namespace #{spec['namespace']}

#endif)
  h.close
  return spec['header']
end

def make_source(spec, piece_names, lic2id, header_name)
  h = File.new(spec['source'], 'w')
  h.puts %Q(// Auto-generated file. Do not edit.
#{license_block(lic2id)}

#include "#{header_name}"
#{unique_in_order(piece_names, 'source_includes').join("\n")}

using namespace #{spec['namespace']};
)
  prev = nil
  piece_names.each do |name|
    piece = $PIECES[name]
    next if piece['source_stored'].nil?
    lic = piece['license_stored']
    if lic != prev
      h.puts
      h.puts(lic.nil? ? '// Unspecified license.' : "// Under #{lic2id[lic]}.")
      prev = lic
    end
    h.puts
    h.puts(piece['source_content'])
  end
  h.close
  return spec['source']
end

specs.each_pair do |name, spec|
  default(spec, 'namespace', 'specjson')
  default(spec, 'standalone', false)
  default(spec, 'types', [])
  default(spec, 'name', name)
  default(spec, 'header_extension', 'hpp')
  default(spec, 'source_extension', 'cpp')
  default(spec, 'header', "#{spec['name']}.#{spec['header_extension']}")
  default(spec, 'source', "#{spec['name']}.#{spec['source_extension']}")
  # Set up remaining defaults.
end

specs.each_pair do |name, spec|
  needed = []
  # Figure out what the types need.
  # If we have nothing in requirements then output the header and source.
  if needed.empty?
    needed = $PIECES.keys
  end
  parserpool_substitutions(needed, spec['namespace'])
  needed = arrange_needed(needed)
  lic2id = licenses(needed)
  puts "#{name}: #{needed.join(' ')}"
  hdr = make_header(spec, needed, lic2id)
  src = make_source(spec, needed, lic2id, hdr)
  puts "  Header: #{hdr}, source: #{src}"
end
